// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cozy-realtime lib:  connectWebSocket:  connectWebSocket socket should handle authenticating on socket open 1`] = `
Object {
  "method": "AUTH",
  "payload": "blablablatoken",
}
`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should create and return a cozySocket handling wss 1`] = `
WebSocket {
  "binaryType": "blob",
  "listeners": Object {
    "close": Array [
      [Function],
    ],
    "error": Array [
      [Function],
    ],
    "message": Array [
      [MockFunction],
    ],
    "open": Array [
      [Function],
    ],
  },
  "protocol": "io.cozy.websocket",
  "readyState": 0,
  "url": "wss://localhost:8880/realtime/",
}
`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should handle authenticating on socket open 1`] = `
Object {
  "method": "AUTH",
  "payload": "blablablatoken",
}
`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should handle closing server 1`] = `
CloseEvent {
  "bubbles": false,
  "cancelBubble": false,
  "cancelable": false,
  "code": 1000,
  "currentTarget": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction],
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": undefined,
    "url": "ws://localhost:8880/realtime/",
  },
  "defaultPrevented": false,
  "eventPhase": 0,
  "isTrusted": false,
  "reason": "",
  "returnValue": true,
  "srcElement": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction],
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": undefined,
    "url": "ws://localhost:8880/realtime/",
  },
  "target": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction],
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": undefined,
    "url": "ws://localhost:8880/realtime/",
  },
  "timeStamp": 0,
  "type": "close",
  "wasClean": true,
}
`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should handle message 1`] = `
MessageEvent {
  "bubbles": false,
  "cancelable": false,
  "canncelBubble": false,
  "currentTarget": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction] {
          "calls": Array [
            Array [
              [Circular],
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": 0,
    "url": "ws://localhost:8880/realtime/",
  },
  "data": "a server message to socket",
  "defaultPrevented": false,
  "eventPhase": 0,
  "isTrusted": false,
  "lastEventId": "",
  "origin": "ws://localhost:8880/realtime/",
  "ports": null,
  "returnValue": true,
  "srcElement": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction] {
          "calls": Array [
            Array [
              [Circular],
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": 0,
    "url": "ws://localhost:8880/realtime/",
  },
  "target": WebSocket {
    "binaryType": "blob",
    "listeners": Object {
      "close": Array [
        [Function],
      ],
      "error": Array [
        [Function],
      ],
      "message": Array [
        [MockFunction] {
          "calls": Array [
            Array [
              [Circular],
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      ],
      "open": Array [
        [Function],
      ],
    },
    "protocol": "io.cozy.websocket",
    "readyState": 0,
    "url": "ws://localhost:8880/realtime/",
  },
  "timeStamp": 0,
  "type": "message",
}
`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should throw error if no url or domain provided 1`] = `"domain is required if no attribute url are provider.."`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should throw error if wrong url format provided 1`] = `"Unable to detect domain"`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should throw error if wrong url type provided 1`] = `"url should be an URL."`;

exports[`cozy-realtime lib:  connectWebSocket:  socket should warn errors on socket errors 1`] = `"WebSocket error: undefined"`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  cozySocket should not send socket message and add state multiple times if this is the same doctype 1`] = `
Set {
  "io.cozy.mocks",
}
`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  cozySocket should send socket message and add state multiple times if this is the different doctypes 1`] = `
Set {
  "io.cozy.mocks",
  "io.cozy.mocks2",
  "io.cozy.mocks3",
}
`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  cozySocket should throw an error if the listener provided is not a function 1`] = `"Realtime event listener must be a function"`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  getCozySocket should call connectWebSocket with correct config and arguments 1`] = `
Array [
  Object {
    "domain": "cozy.tools:8080",
    "secure": false,
    "token": "blablablatoken",
  },
  [Function],
  [Function],
  3,
  1000,
]
`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  getCozySocket should return a configured cozy socket 1`] = `
Object {
  "subscribe": [Function],
  "unsubscribe": [Function],
}
`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  onSocketClose provided by getCozySocket to connectWebSocket should handle error from a retry connectWebSocket with an error message 1`] = `"Unable to reconnect to realtime. Error: expected socket retry error"`;

exports[`cozy-realtime lib:  cozySocket handling and getCozySocket:  onSocketMessage provided by getCozySocket to connectWebSocket should throw error if eventType error 1`] = `"expected realtime error"`;

exports[`cozy-realtime lib:  subscribeWhenReady:  subscribeWhenReady should retries a provided max number times and throw error if still not opened 1`] = `"socket failed to connect"`;

exports[`cozy-realtime lib:  subscribeWhenReady:  subscribeWhenReady should send the correct socket message if socket opened 1`] = `
Object {
  "method": "SUBSCRIBE",
  "payload": Object {
    "type": "io.cozy.mocks",
  },
}
`;

exports[`cozy-realtime lib:  subscribeWhenReady:  subscribeWhenReady should throw error + warn if message sent with error 1`] = `"Cannot subscribe to doctype io.cozy.mocks: expected socket send error"`;
