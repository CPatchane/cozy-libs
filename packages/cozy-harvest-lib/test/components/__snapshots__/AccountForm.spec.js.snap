// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AccountForm AccountField render a date field 1`] = `
<div
  className="o-field u-m-0"
>
  <Label
    className=""
    error={false}
    htmlFor=""
  >
    fields.date.label
  </Label>
  <Input
    autoComplete="off"
    disabled={false}
    error={false}
    fullwidth={true}
    id=""
    inputRef={[Function]}
    placeholder="fields.date.placeholder"
    size="medium"
    type="date"
    value=""
  />
</div>
`;

exports[`AccountForm AccountField render a dropdown field 1`] = `
<div
  className="o-field u-m-0"
>
  <Label
    className=""
    error={false}
    htmlFor=""
  >
    fields.multiple.label
  </Label>
  <Aware
    className="u-m-0"
    disabled={false}
    error={false}
    fieldProps={Object {}}
    fullwidth={true}
    id=""
    inputRef={[Function]}
    label="fields.multiple.label"
    name="multiple"
    options={
      Array [
        Object {
          "label": "Option 1",
          "value": "option1",
        },
        Object {
          "label": "Option 2",
          "value": "option2",
        },
      ]
    }
    placeholder="fields.multiple.placeholder"
    required={true}
    secondaryLabels={Object {}}
    side={null}
    size="medium"
    t={
      [MockFunction] {
        "calls": Array [
          Array [
            "legacy.fields.multiple.label",
            Object {
              "_": "multiple",
            },
          ],
          Array [
            "fields.multiple.label",
            Object {
              "_": "legacy.fields.multiple.label",
            },
          ],
          Array [
            "fields.multiple.placeholder",
            Object {
              "_": "",
            },
          ],
          Array [
            "accountForm.password.hide",
          ],
          Array [
            "accountForm.password.show",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": "legacy.fields.multiple.label",
          },
          Object {
            "type": "return",
            "value": "fields.multiple.label",
          },
          Object {
            "type": "return",
            "value": "fields.multiple.placeholder",
          },
          Object {
            "type": "return",
            "value": "accountForm.password.hide",
          },
          Object {
            "type": "return",
            "value": "accountForm.password.show",
          },
        ],
      }
    }
    type="select"
  />
</div>
`;

exports[`AccountForm AccountField render a password field 1`] = `
<div
  className="o-field u-m-0"
>
  <Label
    className=""
    error={false}
    htmlFor=""
  >
    fields.passphrase.label
  </Label>
  <InputPassword
    autoComplete="new-password"
    disabled={false}
    error={false}
    fullwidth={true}
    hideLabel="accountForm.password.hide"
    id=""
    inputRef={[Function]}
    placeholder="fields.passphrase.placeholder"
    showLabel="accountForm.password.show"
    showVisibilityButton={true}
    size="medium"
    type="password"
    value=""
  />
</div>
`;

exports[`AccountForm AccountField should render 1`] = `
<div
  className="o-field u-m-0"
>
  <Label
    className=""
    error={false}
    htmlFor=""
  >
    fields.username.label
  </Label>
  <Input
    autoComplete="off"
    disabled={false}
    error={false}
    fullwidth={true}
    id=""
    inputRef={[Function]}
    placeholder="fields.username.placeholder"
    size="medium"
    type="text"
    value=""
  />
</div>
`;

exports[`AccountForm AccountFields should render 1`] = `
<div>
  <Field
    format={[Function]}
    name="username"
    parse={[Function]}
  >
    [Function]
  </Field>
  <Field
    format={[Function]}
    name="passphrase"
    parse={[Function]}
  >
    [Function]
  </Field>
</div>
`;

exports[`AccountForm AccountFields should render encrypted fields with placeholder 1`] = `
<div>
  <Field
    format={[Function]}
    name="username"
    parse={[Function]}
  >
    [Function]
  </Field>
  <Field
    format={[Function]}
    name="passphrase"
    parse={[Function]}
  >
    [Function]
  </Field>
</div>
`;

exports[`AccountForm should redirect to OAuthForm 1`] = `
<Wrapper
  oauth={
    Object {
      "scope": "test",
    }
  }
/>
`;

exports[`AccountForm should render 1`] = `
<div>
  <AccountFields
    container={null}
    initialValues={Object {}}
    manifestFields={
      Object {
        "passphrase": Object {
          "encrypted": true,
          "required": true,
          "type": "password",
        },
        "username": Object {
          "encrypted": false,
          "required": true,
          "role": "identifier",
          "type": "text",
        },
      }
    }
    onKeyUp={[Function]}
    t={
      [MockFunction] {
        "calls": Array [
          Array [
            "accountForm.submit.label",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": "accountForm.submit.label",
          },
        ],
      }
    }
  />
  <DefaultButton
    className="u-mt-2 u-mb-1-half"
    disabled={true}
    extension="full"
    label="accountForm.submit.label"
    onClick={[Function]}
  />
</div>
`;
